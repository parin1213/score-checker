// Generated by https://quicktype.io

export default interface ResponseRelicData {
    RelicMD5: string;
    word_list: WordList[];
    score: string;
    main_status: Status;
    sub_status: Status[];
    category: string;
    set: string;
    character: string;
    StackTrace: string;
    ExceptionMessages: string;
    version: string;
    req: string;
    cropHint: string
    extendRelic: ResponseRelicData[];

    src: string;
    more: boolean;
    showDot: boolean;
    childRelic: boolean;
    parentMD5: string;
}

export interface Status {
    pair: Pair;
    rect: string;
}

export interface Pair {
    Key: string;
    Value: number;
}

export interface WordList {
    text: string;
    rect: string;
}

export function StatustoSring(status: Status) {
    if (!status?.pair?.Key) { return ""; }

    var key = status?.pair?.Key?.replace("%", "");
    var value = status?.pair?.Value?.toFixed(0)?.toString();
    if (status?.pair?.Key?.includes("%")) { value = status?.pair?.Value?.toFixed(1)?.toString() + "%"; }

    return `${key}+${value}`;

}

export function toRectangleObject(rectString: string): Rectangle {
    let match = rectString.match(/^[\(]*(?<x>[-]*\d+),\s*(?<y>[-]*\d+),\s*(?<width>[-]*\d+),\s*(?<height>[-]*\d+)[\)]*$/);

    let x: string = match?.groups?.x || '0';
    let y: string = match?.groups?.y || '0';
    let width: string = match?.groups?.width || '0';
    let height: string = match?.groups?.height || '0';

    let rect: Rectangle = { X: 0, Y: 0, Width: 0, Height: 0 };
    rect.X = parseInt(x);
    rect.Y = parseInt(y);
    rect.Width = parseInt(width);
    rect.Height = parseInt(height);

    return rect;
}

export class Rectangle {
    X: number = 0;
    Y: number = 0;
    Height: number = 0;
    Width: number = 0;
}